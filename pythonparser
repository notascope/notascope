#!/usr/bin/env python3

from xml.dom import minidom
import ast
import sys

with open(sys.argv[1], "r") as source_file:
    source = source_file.read()


def nth_line_pos(n):
    haystack = "\n" + source
    needle = "\n"
    start = haystack.find(needle)
    while start >= 0 and n > 1:
        start = haystack.find(needle, start + len(needle))
        n -= 1
    return start


def ast_visit(node, doc):
    doc_node = doc.createElement("tree")
    doc_node.setAttribute("type", type(node).__name__)

    for x in ["id", "attr", "arg", "value"]:
        if hasattr(node, x) and isinstance(getattr(node, x), (str, int, float)):
            doc_node.setAttribute("label", str(getattr(node, x)))
    if hasattr(node, "op") and isinstance(node.op, ast.AST):
        doc_node.setAttribute("label", type(node.op).__name__)

    if hasattr(node, "lineno"):
        start = nth_line_pos(node.lineno) + node.col_offset
        end = nth_line_pos(node.end_lineno) + node.end_col_offset
        doc_node.setAttribute("pos", str(start))
        doc_node.setAttribute("length", str(end - start))

    for _, value in ast.iter_fields(node):
        if not isinstance(value, list):
            value = [value]
        for item in value:
            if isinstance(item, ast.AST) and item._fields:
                doc_node.appendChild(ast_visit(item, doc))
    return doc_node


doc = minidom.Document()
doc.appendChild(ast_visit(ast.parse(source), doc))
print(doc.toprettyxml())
